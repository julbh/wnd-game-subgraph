// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("tokenId", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get unstaked(): boolean {
    let value = this.get("unstaked");
    return value!.toBoolean();
  }

  set unstaked(value: boolean) {
    this.set("unstaked", Value.fromBoolean(value));
  }
}

export class statsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save statsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save statsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("statsEntity", id.toString(), this);
    }
  }

  static load(id: string): statsEntity | null {
    return changetype<statsEntity | null>(store.get("statsEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dragonStaked(): i32 {
    let value = this.get("dragonStaked");
    return value!.toI32();
  }

  set dragonStaked(value: i32) {
    this.set("dragonStaked", Value.fromI32(value));
  }

  get wizardStaked(): i32 {
    let value = this.get("wizardStaked");
    return value!.toI32();
  }

  set wizardStaked(value: i32) {
    this.set("wizardStaked", Value.fromI32(value));
  }
}

export class userStatsEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("dragonStaked", Value.fromStringArray(new Array(0)));
    this.set("wizardStaked", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save userStatsEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save userStatsEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("userStatsEntity", id.toString(), this);
    }
  }

  static load(id: string): userStatsEntity | null {
    return changetype<userStatsEntity | null>(store.get("userStatsEntity", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get dragonStaked(): Array<string> {
    let value = this.get("dragonStaked");
    return value!.toStringArray();
  }

  set dragonStaked(value: Array<string>) {
    this.set("dragonStaked", Value.fromStringArray(value));
  }

  get wizardStaked(): Array<string> {
    let value = this.get("wizardStaked");
    return value!.toStringArray();
  }

  set wizardStaked(value: Array<string>) {
    this.set("wizardStaked", Value.fromStringArray(value));
  }
}

export class DragonUnStakedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DragonUnStakedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save DragonUnStakedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("DragonUnStakedEntity", id.toString(), this);
    }
  }

  static load(id: string): DragonUnStakedEntity | null {
    return changetype<DragonUnStakedEntity | null>(
      store.get("DragonUnStakedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenIds(): Array<string> {
    let value = this.get("tokenIds");
    return value!.toStringArray();
  }

  set tokenIds(value: Array<string>) {
    this.set("tokenIds", Value.fromStringArray(value));
  }
}

export class WizardUnStakedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("tokenIds", Value.fromStringArray(new Array(0)));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save WizardUnStakedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save WizardUnStakedEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("WizardUnStakedEntity", id.toString(), this);
    }
  }

  static load(id: string): WizardUnStakedEntity | null {
    return changetype<WizardUnStakedEntity | null>(
      store.get("WizardUnStakedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenIds(): Array<string> {
    let value = this.get("tokenIds");
    return value!.toStringArray();
  }

  set tokenIds(value: Array<string>) {
    this.set("tokenIds", Value.fromStringArray(value));
  }
}
